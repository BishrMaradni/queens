#---------------------------------------------------------------------------------------------------
# Define variables
#---------------------------------------------------------------------------------------------------
variables:
  # flags to turn on/ off tests for specific platforms
  DOCKER_TESTS: "1"
  CENTOS_TESTS: "1"
  # optional parameters for pytest calls
  PYTEST_OPTIONAL_PARAMETERS: ""

#---------------------------------------------------------------------------------------------------
# Define stages
#---------------------------------------------------------------------------------------------------
stages:
  - codechecks
  - tests
  - pages

#---------------------------------------------------------------------------------------------------
# Define platform specific settings
#---------------------------------------------------------------------------------------------------
.docker_settings:
  image: continuumio/miniconda3:latest
  services:
    - name: mongo:4.1
      alias: localhost
  before_script:
    - export PIP_CACHE_DIR="/opt/cache/pip"
    - apt-get update
    - apt-get install gcc -y
    - apt-get install libgl1-mesa-glx -y
    - apt-get install libxt6
    - conda env create -f environment.yml -n queens
    - source activate queens
    - python setup.py develop
  only:
    variables:
      - $DOCKER_TESTS == "1"
  tags:
    - queens-docker

#----------------------------------------------------------------------------------------------
.centos_settings:
  before_script:
    - conda update -n base conda
    - conda env create -f environment.yml -n queens-$CI_JOB_ID
    - source activate queens-$CI_JOB_ID
    - python setup.py develop
  after_script:
    - conda env remove -n queens-$CI_JOB_ID
  only:
    variables:
      - $CENTOS_TESTS == "1"
  tags:
    - queens-centos

#---------------------------------------------------------------------------------------------------
# Jobs of stage: codechecks
#---------------------------------------------------------------------------------------------------
code_analysis:
  # code analysis with pylint
  extends:
    - .centos_settings
  stage: codechecks
  script:
    - pylint --output-format=parseable pqueens | tee track_pylint.txt
  artifacts:
    name: "$CI_JOB_NAME-$CI_JOB_ID"
    paths:
      - track_pylint.txt
    when: on_failure
    expire_in: 4 weeks

#----------------------------------------------------------------------------------------------
documentation:
  # build the documentation
  extends:
    - .centos_settings
  stage: codechecks
  script:
    - sphinx-apidoc -o doc/source pqueens -f -M
    - cd doc
    # "make html" triggers:
    - sphinx-build -b html -d build/doctrees   source build/html
  artifacts:
    name: sphinx_documentation
    paths:
      - doc/build/html
    when: on_success
    expire_in: 3 days

#----------------------------------------------------------------------------------------------
license_check:
  # check licence compliance
  extends:
    - .centos_settings
  stage: codechecks
  script:
    - ./parse_env_for_liccheck.sh
    - liccheck -s lic_strategy.ini  -r requirements.tmp


#---------------------------------------------------------------------------------------------------
# Jobs of stage: tests
#---------------------------------------------------------------------------------------------------
.full_test_suite_develop:
  # run full test suite, meant for development and feature branches
  # note that baci related tests don't work with docker
  stage: tests
  except:
    refs:
      - master

docker_full_test_suite_develop:
  extends:
    - .docker_settings
    - .full_test_suite_develop
  script:
    - echo "executing:"
    - echo "pytest --ignore=pqueens/tests/benchmarks/ --ignore=pqueens/tests/integration_tests/integration_tests_baci/ --ignore=pqueens/tests/integration_tests/integration_tests_cluster/ $PYTEST_OPTIONAL_PARAMETERS"
    - pytest --ignore=pqueens/tests/benchmarks/ --ignore=pqueens/tests/integration_tests/integration_tests_baci/ --ignore=pqueens/tests/integration_tests/integration_tests_cluster/ $PYTEST_OPTIONAL_PARAMETERS

centos_full_test_suite_develop:
  extends:
    - .centos_settings
    - .full_test_suite_develop
  script:
    - cd pqueens/
    - /usr/bin/singularity --version
    - /usr/bin/singularity build --fakeroot ../driver.simg ../singularity_recipe
    - cd ../
    - echo "executing:"
    - echo "pytest --ignore=pqueens/tests/benchmarks/ --ignore=pqueens/tests/integration_tests/integration_tests_cluster/ $PYTEST_OPTIONAL_PARAMETERS"
    - pytest --ignore=pqueens/tests/benchmarks/ --ignore=pqueens/tests/integration_tests/integration_tests_cluster/ $PYTEST_OPTIONAL_PARAMETERS
#----------------------------------------------------------------------------------------------
.full_test_suite_master:
  # run full test suite on one core to be safe, meant for master branch only
  # i.e., nightly testing and after a merge request
  # build a html coverage report based on the full test suite
  # note that baci related tests don't work with docker
  stage: tests
  only:
    refs:
      - master

docker_full_test_suite_master:
  extends:
    - .docker_settings
    - .full_test_suite_master
  script:
    - echo "executing:"
    - echo "pytest --ignore=pqueens/tests/benchmarks/ --ignore=pqueens/tests/integration_tests/integration_tests_baci/ --ignore=pqueens/tests/integration_tests/integration_tests_cluster/ $PYTEST_OPTIONAL_PARAMETERS"
    - pytest --ignore=pqueens/tests/benchmarks/ --ignore=pqueens/tests/integration_tests/integration_tests_baci/  --ignore=pqueens/tests/integration_tests/integration_tests_cluster/ --cov-report=html:$CI_PROJECT_DIR/html_coverage_report $PYTEST_OPTIONAL_PARAMETERS

centos_full_test_suite_master:
  extends:
    - .centos_settings
    - .full_test_suite_master
  script:
    - cd pqueens/
    - /usr/bin/singularity --version
    - /usr/bin/singularity build --fakeroot ../driver.simg ../singularity_recipe
    - cd ../
    - echo "executing:"
    - echo "pytest --ignore=pqueens/tests/benchmarks/ --ignore=pqueens/tests/integration_tests/integration_tests_cluster/ $PYTEST_OPTIONAL_PARAMETERS"
    - pytest --ignore=pqueens/tests/benchmarks/ --ignore=pqueens/tests/integration_tests/integration_tests_cluster/ --cov-report=html:$CI_PROJECT_DIR/html_coverage_report $PYTEST_OPTIONAL_PARAMETERS
  artifacts:
    name: coverage_report
    paths:
      - html_coverage_report
    when: on_success
    expire_in: 3 days

#---------------------------------------------------------------------------------------------------
# Jobs of stage: pages
#---------------------------------------------------------------------------------------------------
pages:
  # used to deploy the coverage report and the documentation to GitLab pages
  # job name has to be pages and triggers deploy stage
  stage: pages
  # disable cache on this job since we do not need conda env here
  dependencies:
    - documentation
    - centos_full_test_suite_master
  before_script:
    # use the base environment for badge creation
    - source activate base
    - pip install anybadge
    - mkdir public
  script:
    - mv html_coverage_report public/coverage_report
    - mv doc/build/html public/docs
    # Create sphinx badge
    - anybadge -l sphinx -v passed --color=green -f public/sphinx-badge.svg
  artifacts:
      # store the public path in artifact
      # this is needed since in a subsequent deploy stage (automatically generated by GitLab)
      # the content of the below artifact is published on GitLab Pages
      paths:
          - public
  tags:
    - queens-centos
  only:
    refs:
      - master
