# Define variables
#---------------------------------------------------------------------------------------------------
variables:
  # flags to turn on/ off tests for specific platforms
  DOCKER_TESTS: "1"
  UBUNTU_TESTS: "1"
  CLUSTER_TESTS: "0"
  BENCHMARKS: "0"
  UPDATE_REQUIREMENTS: "0"
  # optional parameters for pytest calls
  PYTEST_OPTIONAL_PARAMETERS: ""

#---------------------------------------------------------------------------------------------------
# Define stages
#---------------------------------------------------------------------------------------------------
stages:
  - update_requirements
  - build
  - codechecks
  - tests
  - pages
  - cleanup

#---------------------------------------------------------------------------------------------------
# Define platform specific settings
#---------------------------------------------------------------------------------------------------
.docker_settings:
  image: continuumio/miniconda3:latest
  services:
    - name: mongo:4.1
      alias: localhost
  before_script:
    - export PIP_CACHE_DIR="/opt/cache/pip"
    - apt-get update
    - apt-get install gcc -y
    - apt-get install libgl1-mesa-glx -y
    - apt-get install libxt6 -y
    - apt-get install libtbb2 -y
    - apt-get install gfortran -y
    - conda env create -f environment.yml -n queens
    - source activate queens
    - pip install -e .[develop]
  only:
    variables:
      - $DOCKER_TESTS == "1"
  tags:
    - queens-docker

#----------------------------------------------------------------------------------------------
# Settings
#----------------------------------------------------------------------------------------------
.ubuntu_build_settings:
  before_script:
    - source /home/gitlab-runner/anaconda/miniconda/etc/profile.d/conda.sh
    - conda update -n base conda
  only:
    variables:
      - $UBUNTU_TESTS == "1"
  tags:
    - queens-ubuntu
#----------------------------------------------------------------------------------------------
.ubuntu_settings:
  before_script:
    - source /home/gitlab-runner/anaconda/miniconda/etc/profile.d/conda.sh
    - conda activate queens-$CI_PIPELINE_ID
  only:
    variables:
      - $UBUNTU_TESTS == "1"
  tags:
    - queens-ubuntu
#----------------------------------------------------------------------------------------------
.codechecks_settings:
  extends:
    - .ubuntu_settings
  stage: codechecks
  except:
    variables:
      - $CLUSTER_TESTS == "1"
      - $BENCHMARKS == "1"
  tags:
    - codechecks

#---------------------------------------------------------------------------------------------------
# Jobs of stage: build conda and remove
#---------------------------------------------------------------------------------------------------
build_conda_env:
  extends:
    - .ubuntu_build_settings
  stage: build
  script:
    - source /home/gitlab-runner/anaconda/miniconda/etc/profile.d/conda.sh
    - conda env create -f environment.yml -n queens-$CI_PIPELINE_ID
    - conda activate queens-$CI_PIPELINE_ID
    - pip install -e .[develop]
    - conda env export > pipeline_conda_environment.yml
  artifacts:
    name: "conda_env-$CI_PIPELINE_ID.yml"
    paths:
      - pipeline_conda_environment.yml
    when: always
    expire_in: 4 weeks

remove_conda_env_and_singularity_image:
  stage: cleanup
  script:
    - source /home/gitlab-runner/anaconda/miniconda/etc/profile.d/conda.sh
    - conda env remove -n queens-$CI_PIPELINE_ID
    - rm /tmp/singularity_image.sif-$CI_PIPELINE_ID
  when: always
  variables:
    GIT_STRATEGY: none
  only:
    variables:
      - $UBUNTU_TESTS == "1"
  tags:
    - queens-ubuntu

build_singularity:
  stage: build
  script:
    - unset SINGULARITY_BIND && /usr/bin/singularity build --fakeroot singularity_image.sif singularity_recipe.def
    - mv singularity_image.sif /tmp/singularity_image.sif-$CI_PIPELINE_ID
  only:
    variables:
      - $UBUNTU_TESTS == "1"
  tags:
    - queens-ubuntu

#---------------------------------------------------------------------------------------------------
# Jobs of stage: codechecks
#---------------------------------------------------------------------------------------------------
code_analysis:
  # code analysis
  extends:
    - .codechecks_settings
  stage: codechecks
  script:
    - vulture pqueens > track_vulture.txt
    - pylint --output-format=parseable pqueens | tee track_pylint.txt
    - isort --check-only pqueens/ > track_isort.txt
    - black --check pqueens > track_black.txt
  artifacts:
    name: "$CI_JOB_NAME-$CI_JOB_ID"
    paths:
      - track_pylint.txt
      - track_vulture.txt
      - track_isort.txt
      - track_black.txt
    when: on_failure
    expire_in: 4 weeks
  needs:
    - build_conda_env
#----------------------------------------------------------------------------------------------
documentation:
  # build the documentation
  extends:
    - .codechecks_settings
  stage: codechecks
  script:
    - sphinx-apidoc -o doc/source pqueens -f -M
    - cd doc
    # "make html" triggers:
    - sphinx-build -b html -d build/doctrees   source build/html
  artifacts:
    name: sphinx_documentation
    paths:
      - doc/build/html
    when: on_success
    expire_in: 3 days
  needs:
    - build_conda_env
#----------------------------------------------------------------------------------------------
license_check:
  # check licence compliance
  extends:
    - .codechecks_settings
  stage: codechecks
  script:
    - liccheck -s lic_strategy.ini  -r requirements.txt
  needs:
    - build_conda_env

#---------------------------------------------------------------------------------------------------
# Jobs of stage: tests
#---------------------------------------------------------------------------------------------------
# Docker tests
#---------------------------------------------------------------------------------------------------
docker_full_test_suite:
  stage: tests
  extends:
    - .docker_settings
  script:
    - pytest -m "unit_tests or integration_tests" --cov --cov-report=term $PYTEST_OPTIONAL_PARAMETERS
  needs: []
  when: always
#---------------------------------------------------------------------------------------------------
# ubuntu tests
#---------------------------------------------------------------------------------------------------
ubuntu_full_test_suite_develop:
  stage: tests
  extends:
    - .ubuntu_settings
  script:
    - cp /tmp/singularity_image.sif-$CI_PIPELINE_ID  singularity_image.sif
    - pytest -m "unit_tests or integration_tests or integration_tests_baci" --cov --cov-report=term $PYTEST_OPTIONAL_PARAMETERS
  needs:
    - build_conda_env
    - build_singularity
  except:
    variables:
      - $CLUSTER_TESTS == "1"
      - $BENCHMARKS == "1"
    refs:
      - master
#----------------------------------------------------------------------------------------------
# Master tests
#---------------------------------------------------------------------------------------------------
ubuntu_full_test_suite_master:
  stage: tests
  extends:
    - .ubuntu_settings
  script:
    - cp /tmp/singularity_image.sif-$CI_PIPELINE_ID  singularity_image.sif
    - pytest -m "unit_tests or integration_tests or integration_tests_baci" --cov --cov-report=term --cov-report=html:$CI_PROJECT_DIR/html_coverage_report $PYTEST_OPTIONAL_PARAMETERS
  artifacts:
    name: coverage_report
    paths:
      - html_coverage_report
    when: on_success
    expire_in: 3 days
  needs:
    - build_conda_env
    - build_singularity
  only:
    refs:
      - master
  except:
    variables:
      - $CLUSTER_TESTS == "1"
      - $BENCHMARKS == "1"
#----------------------------------------------------------------------------------------------
# Weekly tests
#---------------------------------------------------------------------------------------------------
cluster_tests:
  stage: tests
  extends:
    - .ubuntu_settings
  script:
    - cp /tmp/singularity_image.sif-$CI_PIPELINE_ID  singularity_image.sif
    - pytest -m lnm_cluster --no-cov
  needs:
    - build_conda_env
    - build_singularity
  only:
    variables:
    - $CLUSTER_TESTS == "1"
#---------------------------------------------------------------------------------------------------
benchmarks:
  stage: tests
  extends:
    - .ubuntu_settings
  script:
    - cp /tmp/singularity_image.sif-$CI_PIPELINE_ID  singularity_image.sif
    - pytest -m benchmark --no-cov
  needs:
    - build_conda_env
    - build_singularity
  only:
    variables:
    - $BENCHMARKS == "1"
#---------------------------------------------------------------------------------------------------
update:
  stage: update_requirements
  script:
    - cd $CI_PROJECT_DIR
    # create simply environment to use pip-tools
    - source /home/gitlab-runner/anaconda/miniconda/etc/profile.d/conda.sh
    - conda activate piptools-env
    - pip-compile --upgrade
    - conda deactivate
    - UPDATE_BRANCH_NAME="piptools-update-$(date '+%Y-%m-%d')"
    - GITLAB_USER_NAME=project_${CI_PROJECT_ID}_bot
    - git config --global user.name "${AUTO_COMMITTER_NAME}"
    - git config --global user.email "${AUTO_COMMITTER_EMAIL}"
    # Checkout to a new branch so we push the changes to a new branch
    - git branch -f $UPDATE_BRANCH_NAME && git checkout $UPDATE_BRANCH_NAME
    - git add requirements.txt
    - git commit -m "Update requirements based on pip-tools"
    - git push --force "https://${GITLAB_USER_NAME}:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}"
    - >
      BODY="{\"id\": \"${CI_PROJECT_ID}\",
      \"source_branch\": \"${UPDATE_BRANCH_NAME}\",
      \"target_branch\": \"${CI_DEFAULT_BRANCH}\",
      \"remove_source_branch\": true,
      \"title\": \"Pip-tools update $(date '+%Y-%m-%d')\"}"
    - >
      MR_IID=$(curl -sS -X POST "https://gitlab.lrz.de/api/v4/projects/${CI_PROJECT_ID}/merge_requests" \
              --header "PRIVATE-TOKEN:${GIT_PUSH_TOKEN}" \
              --header "Content-Type: application/json" \
              --data "${BODY}" \
      | jq '.iid')
    - echo "Opened MR !${MR_IID}"
  rules:
    variables:
    - if: $UPDATE_REQUIREMENTS == "1"

#---------------------------------------------------------------------------------------------------
# Jobs of stage: pages
#---------------------------------------------------------------------------------------------------
pages:
  # used to deploy the coverage report and the documentation to GitLab pages
  # job name has to be pages and triggers deploy stage
  stage: pages
  # disable cache on this job since we do not need conda env here
  dependencies:
    - documentation
    - ubuntu_full_test_suite_master
  before_script:
    # use the base environment for badge creation
    - source /home/gitlab-runner/anaconda/miniconda/etc/profile.d/conda.sh
    - conda activate base
    - conda install pip
    - pip install anybadge
    - mkdir public
  script:
    - mv html_coverage_report public/coverage_report
    - mv doc/build/html public/docs
    # Create sphinx badge
    - anybadge -l sphinx -v passed --color=green -f public/sphinx-badge.svg
  artifacts:
    # store the public path in artifact
    # this is needed since in a subsequent deploy stage (automatically generated by GitLab)
    # the content of the below artifact is published on GitLab Pages
    paths:
      - public
  tags:
    - queens-ubuntu
  only:
    refs:
      - master
  except:
    variables:
      - $CLUSTER_TESTS == "1"
      - $BENCHMARKS == "1"
