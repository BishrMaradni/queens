---
#---------------------------------------------------------------------------------------------------
# Define variables
variables:
  # flags to turn on/ off tests for specific platforms
  UBUNTU_TESTS: "1"
  CLUSTER_TESTS: "1"
  CLUSTER_NATIVE_TESTS: "1"
  BENCHMARKS: "0"
  UPDATE_REQUIREMENTS: "0"
  # optional parameters for pytest calls
  PYTEST_OPTIONAL_PARAMETERS: ""
#---------------------------------------------------------------------------------------------------
# Define stages
#---------------------------------------------------------------------------------------------------
stages:
  - build
  - codechecks
  - tests
  - badges
  - pages
  - cleanup
#---------------------------------------------------------------------------------------------------
# Define general workflow
#---------------------------------------------------------------------------------------------------
# in order to run at all any pipeline has to fulfill one of the  following conditions
workflow:
  rules:
    # check for draft status
    - if: '$CI_MERGE_REQUEST_TITLE =~ /^(\[Draft\]|\(Draft\)|Draft:)/'
      when: never
    # for merge requests
    - if: $CI_MERGE_REQUEST_IID
    # for tags
    - if: $CI_COMMIT_TAG
    # for the master branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # if manually triggered with the web interface's "run pipeline"
    - if: '$CI_PIPELINE_SOURCE == "web"'
#---------------------------------------------------------------------------------------------------
# Define platform specific settings
#---------------------------------------------------------------------------------------------------
.ubuntu_build_conditions:
  rules:
    - if: ($UBUNTU_TESTS == "1") || ($CLUSTER_TESTS == "1") || ($BENCHMARKS == "1")
#----------------------------------------------------------------------------------------------
.ubuntu_settings:
  before_script:
    - conda activate queens-$CI_PIPELINE_ID
    - SINGULARITY_IMAGE_PATH="$(python pqueens/utils/config_directories.py)"
    - echo $SINGULARITY_IMAGE_PATH
    - SINGULARITY_DIR="$(dirname "$SINGULARITY_IMAGE_PATH")"
    - mkdir -p $SINGULARITY_DIR
    - cp /tmp/singularity_image.sif-$CI_PIPELINE_ID  $SINGULARITY_IMAGE_PATH
  rules:
    - if: ($UBUNTU_TESTS == "1") || ($BENCHMARKS == "1")
#----------------------------------------------------------------------------------------------
.default_test_conditions:
  rules:
    - if: $UBUNTU_TESTS == "1"
#----------------------------------------------------------------------------------------------
.default_test_conditions_default_branch:
  rules:
    - if: ($UBUNTU_TESTS == "1") && ($CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH)
#----------------------------------------------------------------------------------------------
.codechecks_settings:
  before_script:
    - conda activate queens-$CI_PIPELINE_ID
  rules:
    - !reference [.default_test_conditions, rules]
  stage: codechecks
  tags:
    - codechecks
#---------------------------------------------------------------------------------------------------
# Jobs of stage: build
#---------------------------------------------------------------------------------------------------
.build_conda_env:
  stage: build
  rules:
    - !reference [.ubuntu_build_conditions, rules]
  before_script:
    - conda update -n base conda
  script:
    - conda env create -f environment.yml -n queens-$CI_PIPELINE_ID
    - conda activate queens-$CI_PIPELINE_ID
    - pip install -e .[develop]
    - conda env export > pipeline_conda_environment.yml
  artifacts:
    name: "conda_env-$CI_PIPELINE_ID.yml"
    paths:
      - pipeline_conda_environment.yml
    when: always
    expire_in: 4 weeks

lnm-build_conda_env:
  extends:
    - .build_conda_env
  tags:
    - lnm-build

imcs-build_conda_env:
  extends:
    - .build_conda_env
  tags:
    - imcs-build
#----------------------------------------------------------------------------------------------
.build_conda_env_cluster_native:
  stage: build
  script:
    - conda env create -f environment.yml -n queens-$CI_PIPELINE_ID
    - conda activate queens-$CI_PIPELINE_ID
    - pip install -e .[develop]
    - conda env export > pipeline_conda_environment.yml
  rules:
    - if: $CLUSTER_NATIVE_TESTS == "1"
  artifacts:
    name: "conda_env-$CI_PIPELINE_ID.yml"
    paths:
      - pipeline_conda_environment.yml
    when: always
    expire_in: 4 weeks

#bruteforce-native-build_conda_env:
#  extends:
#    - .build_conda_env_cluster_native
#  tags:
#    - bruteforce-native-test

deep-native-build_conda_env:
  extends:
    - .build_conda_env_cluster_native
  tags:
    - deep-native-test
#----------------------------------------------------------------------------------------------
.build_singularity:
  stage: build
  script:
    - unset SINGULARITY_BIND && singularity build --fakeroot singularity_image.sif pqueens/singularity/singularity_recipe.def
    - mv singularity_image.sif /tmp/singularity_image.sif-$CI_PIPELINE_ID
  rules:
    - !reference [.ubuntu_build_conditions, rules]

lnm-build_singularity:
  extends:
    - .build_singularity
  tags:
    - lnm-build

imcs-build_singularity:
  extends:
    - .build_singularity
  tags:
    - imcs-build
#----------------------------------------------------------------------------------------------
update:
  stage: build
  script:
    - cd $CI_PROJECT_DIR
    # create a simple environment to use pip-tools
    - conda create -n piptools-env python==3.10 -y
    - conda activate piptools-env
    - pip install pip-tools
    - pip-compile --upgrade requirements.in --output-file requirements.txt
    - pip-compile --upgrade dev-requirements.in --output-file dev-requirements.txt
    # Update singularity image requirements
    - pip-compile --upgrade pqueens/singularity/requirements.in --output-file pqueens/singularity/requirements.txt
    - cd $CI_PROJECT_DIR
    - conda deactivate
    - UPDATE_BRANCH_NAME="piptools-update-$(date '+%Y-%m-%d')"
    - GITLAB_USER_NAME=project_${CI_PROJECT_ID}_bot
    - git config --global user.name "${AUTO_COMMITTER_NAME}"
    - git config --global user.email "${AUTO_COMMITTER_EMAIL}"
    # Checkout to a new branch so we push the changes to a new branch
    - git branch -f $UPDATE_BRANCH_NAME && git checkout $UPDATE_BRANCH_NAME
    - git add requirements.txt dev-requirements.txt pqueens/singularity/requirements.txt
    - git commit -m "Update requirements based on pip-tools"
    - git push --force "https://${GITLAB_USER_NAME}:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}"
    - >
      BODY="{\"id\": \"${CI_PROJECT_ID}\",
      \"source_branch\": \"${UPDATE_BRANCH_NAME}\",
      \"target_branch\": \"${CI_DEFAULT_BRANCH}\",
      \"remove_source_branch\": true,
      \"title\": \"Pip-tools update $(date '+%Y-%m-%d')\"}"
    - >
      MR_IID=$(curl -sS -X POST "https://gitlab.lrz.de/api/v4/projects/${CI_PROJECT_ID}/merge_requests" \
              --header "PRIVATE-TOKEN:${GIT_PUSH_TOKEN}" \
              --header "Content-Type: application/json" \
              --data "${BODY}" \
      | jq '.iid')
    - echo "Opened MR !${MR_IID}"
  rules:
    - if: $UPDATE_REQUIREMENTS == "1"
  tags:
    - lnm-build
#---------------------------------------------------------------------------------------------------
# Jobs of stage: codechecks
#---------------------------------------------------------------------------------------------------
code_analysis:
  # code analysis
  extends:
    - .codechecks_settings
  stage: codechecks
  script:
    - vulture pqueens > track_vulture.txt
    - isort --check-only pqueens/ > track_isort.txt
    - black --check pqueens > track_black.txt
    - pylint --rcfile=.pylintrc_ci pqueens | tee track_pylint.txt
  artifacts:
    name: "$CI_JOB_NAME-$CI_JOB_ID"
    paths:
      - track_pylint.txt
      - track_vulture.txt
      - track_isort.txt
      - track_black.txt
    when: on_failure
    expire_in: 4 weeks
  needs:
    - lnm-build_conda_env
#----------------------------------------------------------------------------------------------
documentation:
  # build the documentation
  extends:
    - .codechecks_settings
  stage: codechecks
  script:
    - sphinx-apidoc -o doc/source pqueens -f -M
    - cd doc
    # "make html" triggers:
    - sphinx-build -b html -d build/doctrees   source build/html
  artifacts:
    name: sphinx_documentation
    paths:
      - doc/build/html
    when: on_success
    expire_in: 3 days
  needs:
    - lnm-build_conda_env
#----------------------------------------------------------------------------------------------
license_check:
  # check license compliance
  extends:
    - .codechecks_settings
  stage: codechecks
  script:
    - liccheck -s lic_strategy.ini  -r requirements.txt
  needs:
    - lnm-build_conda_env
#---------------------------------------------------------------------------------------------------
# Jobs of stage: tests
#---------------------------------------------------------------------------------------------------
# Ubuntu tests
#---------------------------------------------------------------------------------------------------
.ubuntu_full_test_suite:
  extends:
    - .ubuntu_settings
  stage: tests
  rules:
    - !reference [.default_test_conditions, rules]
  script:
    - pytest -v -m "unit_tests or integration_tests or integration_tests_baci" --cov --cov-report=term --cov-report=html:$CI_PROJECT_DIR/html_coverage_report $PYTEST_OPTIONAL_PARAMETERS
  coverage: '/TOTAL.*\s+(\d+%)/'
  artifacts:
    name: coverage_report
    paths:
      - html_coverage_report
    when: on_success
    expire_in: 3 days

lnm-ubuntu_full_test_suite:
  extends:
    - .ubuntu_full_test_suite
  needs:
    - lnm-build_conda_env
    - lnm-build_singularity
  tags:
    - lnm-ubuntu

imcs-ubuntu_full_test_suite:
  extends:
    - .ubuntu_full_test_suite
  needs:
    - imcs-build_conda_env
    - imcs-build_singularity
  tags:
    - imcs-ubuntu
#---------------------------------------------------------------------------------------------------
# Weekly tests
#---------------------------------------------------------------------------------------------------
# Cluster tests
#---------------------------------------------------------------------------------------------------
.cluster_tests_conditions:
  rules:
    - if: $CLUSTER_TESTS == "1"
#---------------------------------------------------------------------------------------------------
.cluster_tests:
  extends:
    - .ubuntu_settings
    - .cluster_tests_conditions
  stage: tests
  script:
    - pytest -v -m $CLUSTER_MARKER --no-cov -o log_cli=true --log-cli-level=DEBUG $PYTEST_OPTIONAL_PARAMETERS

#lnm-cluster_tests:
#  extends:
#    - .cluster_tests
#  variables:
#    CLUSTER_MARKER: 'lnm_cluster'
#  needs:
#    - lnm-build_conda_env
#    - lnm-build_singularity
#  tags:
#    - lnm-ubuntu

imcs-cluster_tests:
  extends:
    - .cluster_tests
  variables:
    CLUSTER_MARKER: "imcs_cluster"
  needs:
    - imcs-build_conda_env
    - imcs-build_singularity
  tags:
    - imcs-ubuntu
#---------------------------------------------------------------------------------------------------
# Cluster tests native
#---------------------------------------------------------------------------------------------------
.cluster_tests_native_conditions:
  rules:
    - if: $CLUSTER_NATIVE_TESTS == "1"
#---------------------------------------------------------------------------------------------------
#bruteforce-native-cluster_tests:
#  extends:
#    - .cluster_tests_native_conditions
#  stage: tests
#  before_script:
#    - module load comp/gcc/9.1.0 mpi/openmpi/gcc/1.10.1 boost/1.71_gcc9
#  script:
#    - conda activate queens-$CI_PIPELINE_ID
#    - pytest -v -m lnm_cluster_bruteforce_native --no-cov $PYTEST_OPTIONAL_PARAMETERS
#  needs:
#    - bruteforce-native-build_conda_env
#  tags:
#    - bruteforce-native-test

deep-native-cluster_tests:
  extends:
    - .cluster_tests_native_conditions
  stage: tests
  before_script:
    - module load gcc/9 mpi/openmpi-4.0.1 boost/1.71_gcc9
  script:
    - conda activate queens-$CI_PIPELINE_ID
    - pytest -v -m lnm_cluster_deep_native --no-cov $PYTEST_OPTIONAL_PARAMETERS
  needs:
    - deep-native-build_conda_env
  tags:
    - deep-native-test
#---------------------------------------------------------------------------------------------------
# Benchmarks
#---------------------------------------------------------------------------------------------------
benchmarks:
  stage: tests
  extends:
    - .ubuntu_settings
  rules:
    - if: $BENCHMARKS == "1"
  script:
    - pytest -v -m benchmark --no-cov $PYTEST_OPTIONAL_PARAMETERS
  needs:
    - lnm-build_conda_env
    - lnm-build_singularity

#---------------------------------------------------------------------------------------------------
# Jobs of stage: badges
#---------------------------------------------------------------------------------------------------
# Basic setting to trigger the creation of a documentation badge in a downstream project
.trigger_documentation_badge:
  stage: badges
  needs: ["documentation"]
  rules:
    - !reference [.default_test_conditions_default_branch, rules]
  trigger:
    project: queens_community/queens_badges/documentation-badge
#---------------------------------------------------------------------------------------------------
# Create documentation badge in case of a successful documentation job
trigger_documentation_badge_success:
  extends:
    - .trigger_documentation_badge
  when: on_success
  variables:
    SUCCESS_DOCUMENTATION_BUILD: "1"
#---------------------------------------------------------------------------------------------------
# Create documentation badge in case of a failed documentation job
trigger_documentation_badge_fail:
  extends:
    - .trigger_documentation_badge
  when: on_failure
  variables:
    SUCCESS_DOCUMENTATION_BUILD: "0"
#---------------------------------------------------------------------------------------------------
# Basic setting to trigger the creation of a benchmarks badge in a downstream project
.trigger_benchmarks_badge:
  stage: badges
  needs: ["benchmarks"]
  rules:
    - if: ($BENCHMARKS == "1") && ($CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH)
  trigger:
    project: queens_community/queens_badges/benchmarks-badge
#---------------------------------------------------------------------------------------------------
# Create benchmarks badge in case of a successful benchmarks job
trigger_benchmarks_badge_success:
  extends:
    - .trigger_benchmarks_badge
  when: on_success
  variables:
    SUCCESS_BENCHMARKS_PIPELINE: "1"
#---------------------------------------------------------------------------------------------------
# Create benchmarks badge in case of a failed benchmarks job
trigger_benchmarks_badge_fail:
  extends:
    - .trigger_benchmarks_badge
  when: on_failure
  variables:
    SUCCESS_BENCHMARKS_PIPELINE: "0"
#---------------------------------------------------------------------------------------------------
# Basic setting to trigger the creation of a cluster badge in a downstream project
.trigger_cluster_badge:
  extends:
    - .cluster_tests_conditions
  stage: badges
  # needs: ["lnm-cluster_tests", "imcs-cluster_tests"]
  needs: ["imcs-cluster_tests"]
  rules:
    - if: ($CLUSTER_TESTS == "1") && ($CLUSTER_NATIVE_TESTS == "1") && ($CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH)
  trigger:
    project: queens_community/queens_badges/cluster-badge
#---------------------------------------------------------------------------------------------------
# Create cluster badge in case of a successful cluster job
trigger_cluster_badge_success:
  extends:
    - .trigger_cluster_badge
  when: on_success
  variables:
    SUCCESS_CLUSTER_PIPELINE: "1"
#---------------------------------------------------------------------------------------------------
# Create cluster badge in case of a failed cluster job
trigger_cluster_badge_fail:
  extends:
    - .trigger_cluster_badge
  when: on_failure
  variables:
    SUCCESS_CLUSTER_PIPELINE: "0"
#---------------------------------------------------------------------------------------------------
# Jobs of stage: pages
#---------------------------------------------------------------------------------------------------
pages:
  # used to deploy the coverage report and the documentation to GitLab pages
  # job name has to be pages and triggers deploy stage
  stage: pages
  rules:
    - !reference [.default_test_conditions_default_branch, rules]
  dependencies:
    - documentation
    - lnm-ubuntu_full_test_suite
  script:
    - mkdir public
    - mv html_coverage_report public/coverage_report
    - mv doc/build/html public/docs
  artifacts:
    # store the public path in artifact
    # this is needed since in a subsequent deploy stage (automatically generated by GitLab)
    # the content of the below artifact is published on GitLab Pages
    paths:
      - public
  tags:
    - lnm-ubuntu
#---------------------------------------------------------------------------------------------------
# Jobs of stage: cleanup
#---------------------------------------------------------------------------------------------------
# Remove conda env and singularity image on ubuntu runners
.remove_conda_env_and_singularity_image:
  stage: cleanup
  script:
    - conda env remove -n queens-$CI_PIPELINE_ID
    - rm /tmp/singularity_image.sif-$CI_PIPELINE_ID
  when: always
  variables:
    GIT_STRATEGY: none
  rules:
    - !reference [.ubuntu_build_conditions, rules]

lnm-remove_conda_env_and_singularity_image:
  extends:
    - .remove_conda_env_and_singularity_image
  dependencies:
    - lnm-build_conda_env
  tags:
    - lnm-build

imcs-remove_conda_env_and_singularity_image:
  extends:
    - .remove_conda_env_and_singularity_image
  dependencies:
    - imcs-build_conda_env
  tags:
    - imcs-build
#---------------------------------------------------------------------------------------------------
# Remove conda env and singularity image on cluster native runners
.remove_conda_env_cluster_native:
  stage: cleanup
  script:
    - conda env remove -n queens-$CI_PIPELINE_ID
  when: always
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CLUSTER_NATIVE_TESTS == "1"

#bruteforce-cluster-native-remove_conda_env:
#  extends:
#    - .remove_conda_env_cluster_native
#  dependencies:
#    - bruteforce-native-build_conda_env
#  tags:
#    - bruteforce-native-test

deep-cluster-native-remove_conda_env:
  extends:
    - .remove_conda_env_cluster_native
  dependencies:
    - deep-native-build_conda_env
  tags:
    - deep-native-test
