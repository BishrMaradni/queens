# yamllint disable
---
#---------------------------------------------------------------------------------------------------
variables:
  LNM_TESTS:
    value: "1"
    description: "Run cluster tests at LNM"
  IMCS_TESTS:
    value: "1"
    description: "Run cluster tests at IMCS"
  LNM_REMOTE_PYTHON:
    value: "/home/queens/miniforge3/envs/queens-$CI_PIPELINE_ID/bin/python"
    description: "Python path on LNM clusters"
  LNM_REMOTE_ADDRESS:
    value: "thought"
    description: "Hostname of LNM cluster"
  IMCS_REMOTE_PYTHON:
    value: "/home/queens/miniforge3/envs/queens-$CI_PIPELINE_ID/bin/python"
    description: "Python path on IMCS clusters"
  IMCS_REMOTE_ADDRESS:
    value: "charon.bauv.unibw-muenchen.de"
    description: "Hostname of IMCS cluster"
  PYTHON_PACKAGE_MANAGER:
    value: "mamba"
    description: "Python package manager to create the python environments"
#---------------------------------------------------------------------------------------------------
# Define stages
#---------------------------------------------------------------------------------------------------
stages:
  - build
  - tests
  - cleanup
#---------------------------------------------------------------------------------------------------
# Define general workflow
#---------------------------------------------------------------------------------------------------
# in order to run at all any pipeline has to fulfill one of the  following conditions
workflow:
  rules:
    # if manually triggered with the web interface's "run pipeline"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
#---------------------------------------------------------------------------------------------------
# Define platform specific settings
#---------------------------------------------------------------------------------------------------
.ubuntu_settings:
  before_script:
    - $PYTHON_PACKAGE_MANAGER activate queens-$CI_PIPELINE_ID
    # This ensures that the correct queens source is used
    - pip install -e .[develop]
    - echo Queens source for testing is $(pip list | grep -o '/.*')
#---------------------------------------------------------------------------------------------------
# Jobs of stage: build
#---------------------------------------------------------------------------------------------------
.build_conda_env:
  stage: build
  before_script:
    - 'echo "Using python environment manager: `$PYTHON_PACKAGE_MANAGER --version`"'
  script:
    - $PYTHON_PACKAGE_MANAGER env create -f environment.yml -n queens-$CI_PIPELINE_ID
    - $PYTHON_PACKAGE_MANAGER activate queens-$CI_PIPELINE_ID
    - pip install -e .[develop]
    - $PYTHON_PACKAGE_MANAGER env export > pipeline_conda_environment.yml
  artifacts:
    name: "conda_env-$CI_PIPELINE_ID.yml"
    paths:
      - pipeline_conda_environment.yml
    when: always
    expire_in: 4 weeks

lnm-build_conda_env:
  extends:
    - .build_conda_env
  tags:
    - lnm-build
  rules:
    - if: $LNM_TESTS == "1"

imcs-build_conda_env:
  extends:
    - .build_conda_env
  tags:
    - imcs-build
  rules:
    - if: $IMCS_TESTS == "1"
#----------------------------------------------------------------------------------------------
.build_conda_env_cluster:
  stage: build
  script:
    - ENV_PREFIX=queens-$CI_PIPELINE_ID
    - $PYTHON_PACKAGE_MANAGER create -y --prefix ./$ENV_PREFIX python=3.11 cloudpickle fabric
    - $PYTHON_PACKAGE_MANAGER activate ./$ENV_PREFIX
    - pip install -e . --no-dependencies
    - python queens/utils/remote_build.py
      --host=$REMOTE_ADDRESS --user=queens --remote-python=$REMOTE_PYTHON
      --remote-queens-repository=/home/queens/builds/queens-$CI_PIPELINE_ID --package-manager
      $PYTHON_PACKAGE_MANAGER

thought-build_conda_env:
  extends:
    - .build_conda_env_cluster
  variables:
    REMOTE_ADDRESS: $LNM_REMOTE_ADDRESS
    REMOTE_PYTHON: $LNM_REMOTE_PYTHON
  tags:
    - lnm-build
  rules:
    - if: $LNM_TESTS == "1"

charon-build_conda_env:
  extends:
    - .build_conda_env_cluster
  variables:
    REMOTE_ADDRESS: $IMCS_REMOTE_ADDRESS
    REMOTE_PYTHON: $IMCS_REMOTE_PYTHON
  tags:
    - imcs-build
  rules:
    - if: $IMCS_TESTS == "1"

#----------------------------------------------------------------------------------------------
.build_4C:
  stage: build
  script:
    - |
      COMMAND="bash -lc 'srun \
        --job-name="queens_ci_build_4c_$CI_PIPELINE_ID" \
        --nodes=1 \
        --ntasks-per-node=1 \
        --cpus-per-task=$SLURM_CPUS \
        --time=$SLURM_TIME \
        $SLURM_EXTRA_ARGUMENTS \
        bash -c \" \
          $LOAD_MODULES \
          module list ; \
          cd ~/workspace ; \
          rm -rfv fourc_source fourc_build ; \
          git clone --depth 1 https://github.com/4C-multiphysics/4C.git fourc_source ; \
          mkdir fourc_build ; \
          cd fourc_build ; \
          cmake --preset=$PRESET_4C ../fourc_source ; \
          ninja -j $SLURM_CPUS full \"'"
    - echo $COMMAND
    - ssh queens@$REMOTE_ADDRESS $COMMAND

thought-build_4C:
  extends:
    - .build_4C
  variables:
    LOAD_MODULES: ""
    REMOTE_ADDRESS: $LNM_REMOTE_ADDRESS
    PRESET_4C: "lnm_thought"
    SLURM_CPUS: "8"
    SLURM_TIME: "01:00:00"
  tags:
    - lnm-build
  rules:
    - if: $LNM_TESTS == "1"

charon-build_4C:
  extends:
    - .build_4C
  variables:
    LOAD_MODULES: "source /home/cluster_tools/user/load_four_c_environment.sh;"
    REMOTE_ADDRESS: $IMCS_REMOTE_ADDRESS
    PRESET_4C: "imcs_charon"
    SLURM_EXTRA_ARGUMENTS: "--partition='all'"
    SLURM_CPUS: "24"
    SLURM_TIME: "00:30:00"
  tags:
    - imcs-build
  rules:
    - if: $IMCS_TESTS == "1"

#---------------------------------------------------------------------------------------------------
# Cluster tests
#---------------------------------------------------------------------------------------------------
.cluster_tests:
  extends:
    - .ubuntu_settings
  stage: tests
  script:
    - pytest tests/integration_tests/cluster/
      -v -m $CLUSTER_MARKER --no-cov -o log_cli=true --log-cli-level=DEBUG
      --remote-user=queens
      --remote-python=$REMOTE_PYTHON
      --remote-queens-repository=/home/queens/builds/queens-$CI_PIPELINE_ID
      --color=yes
      --pipeline-id=$CI_PIPELINE_ID
      --junitxml=test_junit.xml
  artifacts:
    name: $CI_PIPELINE_ID-cluster_test_suite
    paths:
      - test_junit.xml
    reports:
      junit: test_junit.xml
    when: on_success
    expire_in: 3 days

lnm-cluster_tests:
  extends:
    - .cluster_tests
  variables:
    CLUSTER_MARKER: "lnm_cluster"
    REMOTE_PYTHON: $LNM_REMOTE_PYTHON
  needs:
    - lnm-build_conda_env
    - thought-build_conda_env
    - thought-build_4C
  tags:
    - lnm-ubuntu
  rules:
    - if: $LNM_TESTS == "1"

imcs-cluster_tests:
  extends:
    - .cluster_tests
  variables:
    CLUSTER_MARKER: "imcs_cluster"
    REMOTE_PYTHON: $IMCS_REMOTE_PYTHON
  needs:
    - imcs-build_conda_env
    - charon-build_conda_env
    - charon-build_4C
  tags:
    - imcs-ubuntu
  rules:
    - if: $IMCS_TESTS == "1"

#---------------------------------------------------------------------------------------------------
# Jobs of stage: cleanup
#---------------------------------------------------------------------------------------------------
# Remove conda env on ubuntu runners
.remove_conda_env:
  stage: cleanup
  script:
    - $PYTHON_PACKAGE_MANAGER env remove -n queens-$CI_PIPELINE_ID
  when: always
  variables:
    GIT_STRATEGY: none

lnm-remove_conda_env:
  extends:
    - .remove_conda_env
  dependencies:
    - lnm-build_conda_env
  tags:
    - lnm-build
  rules:
    - if: $LNM_TESTS == "1"

imcs-remove_conda_env:
  extends:
    - .remove_conda_env
  dependencies:
    - imcs-build_conda_env
  tags:
    - imcs-build
  rules:
    - if: $IMCS_TESTS == "1"

#---------------------------------------------------------------------------------------------------
# Remove conda env and repository on cluster
.remove_conda_env_cluster:
  stage: cleanup
  script:
    - ssh queens@$REMOTE_ADDRESS "$PYTHON_PACKAGE_MANAGER env remove -n queens-$CI_PIPELINE_ID;
      rm -rf /home/queens/builds/queens-$CI_PIPELINE_ID"
  when: always

thought-cluster-remove_conda_env:
  extends:
    - .remove_conda_env_cluster
  dependencies:
    - thought-build_conda_env
  variables:
    REMOTE_ADDRESS: $LNM_REMOTE_ADDRESS
  tags:
    - lnm-build
  rules:
    - if: $LNM_TESTS == "1"

charon-cluster-remove_conda_env:
  extends:
    - .remove_conda_env_cluster
  dependencies:
    - charon-build_conda_env
  variables:
    REMOTE_ADDRESS: $IMCS_REMOTE_ADDRESS
  tags:
    - imcs-build
  rules:
    - if: $IMCS_TESTS == "1"
